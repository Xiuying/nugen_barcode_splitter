#!/usr/bin/env ruby
require "yaml"
require "optparse"
require "nugen_barcode_splitter"
require "fileutils"

usage =<<EOF
      V E R S I O N - 0 . 0 . 18 - BETA
      #{$0} [options] -p project_dir -o out_dir -c sample_sheet_nugen
_____________________________________________________________________________

      Example sample_sheet_nugen.csv :

FCID,Lane,SampleID,SampleRef,Index,Description,Control,Recipe,Operator,SampleProject
C0ED3ACXX,4,S1,hg19,ACCC,RNA Seq,N,,,33333
C0ED3ACXX,4,S2,hg19,GAGT,RNA Seq,N,,,44444
C0ED3ACXX,4,S3,hg19,CGTA,RNA Seq,N,,,33333
C0ED3ACXX,4,S4,hg19,TTAG,RNA Seq,N,,,44444
C0ED3ACXX,5,S5,hg19,AGGG,RNA Seq,N,,,33333
C0ED3ACXX,5,S6,hg19,GTCA,RNA Seq,N,,,44444
C0ED3ACXX,6,S7,hg19,CCAT,RNA Seq,N,,,33333

      Note: The sample names must be alphanumerical!
_____________________________________________________________________________

EOF

options = {
  :project_dir => nil,
  :out_dir => nil,
  :sample_sheet => nil,
  :eol_only? => "",
  :bel_only? => "",
  :mismatches => "",
  :keep_barcode => "",
  :fastq_multx => "fastq_multx",
  :debug => false,
  :lane_number => ""
}

optparse = OptionParser.new do |opts|
  opts.banner = usage

  opts.on("-p", "--project_dir", :REQUIRED, String,
    "Illumina project directory (../Unaligned/ProjectXXX/)") do |i|
    options[:project_dir] = i if i
  end

  opts.on("-o", "--out_dir", :REQUIRED, String,
    "The desired output directory") do |i|
    options[:out_dir] = i if i
  end

  opts.on("-s","--sample_sheet", :REQUIRED, String,
    "Please provide your sample_sheet") do |i|
    options[:sample_sheet] = i if i
  end

  opts.on("-e","--end_of_line",
    "Limit the search for the barcode to the end of the line DEFAULT:false") do |i|
    options[:eol_only?] = "-e"
  end

  opts.on("-b","--begin_of_line",
    "Limit the search for the barcode to the start of the line DEFAULT:false") do |i|
    options[:bol_only?] = "-b"
  end

  opts.on("-k","--keep_barcode",
    "Do not trim of the barcode DEFAULT:false") do |i|
    options[:keep_barcode] = "-x"
  end

  opts.on("-m","--mismatches NUM", Integer, "Number of mismatches (Default:1)") do |i|
    options[:mismatches] = "-m #{i}" if i
  end

  opts.on("-n","--laneNumber NUM", String, "Specific lane number (Default:all lanes)") do |i|
    options[:lane_number] = i if i
  end

  opts.on("-x", "--fastq_multx DIR", String) do |i|
    options[:fastq_multx] = i if i
  end

  opts.on("-d", "--debug", "Debug mode!") do |i|
    options[:debug] = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  mandatory = [:project_dir, :out_dir, :sample_sheet]
  missing = mandatory.select{ |param| options[param].nil? }
  if !missing.empty?
    puts "\nMissing options given or missing in config_file: \n\t#{missing.join(",\n\t")}"
    puts optparse
    exit
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
   puts $!.to_s
   puts optparse
   exit
end

STDERR.puts "CURRENT OPTIONS:"
STDERR.puts options.to_yaml

# Read out sample_sheet
sample_sheet = SampleSheet.new(options[:sample_sheet])
sample_sheet.create_barcode_txt("#{options[:out_dir]}/barcode")

# Prepare template
multx_opts = "#{options[:keep_barcode]} #{options[:eol_only]} #{options[:bol_only]} #{options[:mismatches]}"
nugen_temp = NugenTemplate.new(options[:fastq_multx],multx_opts)

Dir.glob(options[:project_dir]+"/*").each do |p|
  next unless File.directory? p
  next unless p =~ /Sample_Lane#{options[:lane_number]}/
  outdir = ""
  lane = ""
  Dir.glob(p+"/*").each do |fwd|
    next if File.directory? fwd
    next unless fwd =~ /Lane[1-8]_NoIndex_L[0-9]{3}_R1_[0-9]{3}.fastq.gz/
    rev = fwd.gsub(/_R1_/, "_R2_")
    tmp = fwd.split("/")
    tmp = tmp[-1].split("_")
    lane = tmp[0].gsub(/\D/,"")
    number = tmp[4].gsub(/\D/,"")
    barcodes = "#{options[:out_dir]}/barcode_#{lane}.txt"
    outdir = options[:out_dir] + "Lane#{lane}"
    begin
      FileUtils.mkdir_p outdir unless File.directory? outdir
    rescue Exception => e
      STDERR.puts e.message
    end
    # Fwd_read
    cmd = nugen_temp.fill(lane,number,outdir, barcodes, fwd, true)
    if options[:debug]
      STDERR.puts cmd if options[:debug]
    else
      status = system('bash', '-c', cmd)
      raise "Calling the template for fwd did not succeed!" if !status
    end

    # Merging
    merger = Merger.new(fwd,rev,outdir,number,barcodes)
    stats = merger.merge()
    stats_file = File.open("#{outdir}/nugen_demultiplexing_Lane#{lane}.log", 'a')
    stats_file.write(stats)
    stats_file.close()
  end

  # Add the trimmed bases
  Dir.glob(outdir+"/*").each do |f|
    if f =~ /nugen_demultiplexing/
      sample_sheet.lanes
      statistics = Statistics.new(f)
      stats_out = outdir + "/statistics"
      stats_handler = File.new(stats_out,'w')
      stats_handler.write(statistics.to_s)
      stats_handler.close()
    end
    next unless f =~ /.updated/
    name = f.split("/")[-1]
    id = name.split(".")[1]
    sample_dir = outdir + "/Sample_#{id}"
    begin
      FileUtils.mkdir_p sample_dir unless File.directory? sample_dir
    rescue Exception => e
      STDERR.puts e.message
    end
    name = name.gsub(/.updated/, "")
    cmd = "mv #{f} #{sample_dir}/#{name}"
    if options[:debug]
      STDERR.puts cmd if options[:debug]
    else
      status = system(cmd)
      raise "Was not able to rename and move file #{f}!" if status!=true
    end
    cmd = "gzip #{sample_dir}/#{name}"
    if options[:debug]
      STDERR.puts cmd if options[:debug]
    else
      status = system(cmd)
      raise "Was not able to gzip file #{f}"
    end
  end

end